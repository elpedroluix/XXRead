@page "/"

@inject XStory.BL.Web.DSLocator.Contracts.IServiceStory _serviceStory;
@inject XStory.BL.SQLite.Contracts.IServiceStoryHDSBackup _serviceStorySQLiteHDSBackup;
@inject NavigationManager navManager;



<div style="position: sticky; inset-block-start: 0;">
    <div class="navbar navbar-light" style="background-color:#2a96b1;">
        <div col-2>
            <h3 style="padding: 1vh;">HDS Backup</h3>
        </div>

        <div col-8>
            @* Search bar *@

            <NavLink class="nav-link" href="/okview">
                <b>OkView</b>
            </NavLink>
        </div>

        <div col-2 style="padding: 1vh;">
            <span>Refreshing...</span>
            <button @onclick="GetAllStoriesAndInsertInDB">Get all stories</button>
        </div>
    </div>

    <div style="background-color: #1d687a;">
        <div style="padding: 1vh;">
            <span>Number of stories saved : @InsertedStories</span>
            <button style="float: right; height: 1vh; width: 1vh; background-color: transparent; border: none;">x</button>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <!-- Colonne gauche -->
        <div class="col-3">
            <div class="stories-list">
                <ul id="stories-list-container" style="padding:0; margin:0; overflow: hidden; overflow-y: scroll;">
                    @if (_storiesFromBdd != null)
                    {
                        @foreach (var item in _storiesFromBdd)
                        {
                            <li class="my-2" @onclick="()=>OnStoryTapped(item)" data-container="@item">

                                <div class="row">
                                    <span>@item.Title</span>
                                </div>
                                <div class="row">
                                    <span><b>@item.Url</b></span>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>

        <!-- Colonne droite -->
        <div class="col-9" style="overflow:hidden; overflow-y:scroll;">
            <div class="main-content mx-2">
                @if (_currentStory == null)
                {
                    <h1 style="text-align:center; vertical-align:central;">No story selected.</h1>
                }
                else
                {
                    <p style="text-align: justify;">
                        @_currentStory.Content;
                    </p>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private List<XStory.DTO.Story> _storiesFromBdd;
    private int _pageNumberBdd = 0;

    private int _pageNumber = 0;
    public long InsertedStories = 0;

    private XStory.DTO.Story _currentStory;


    protected override Task OnInitializedAsync()
    {
        GetStoriesFromBdd();

        return base.OnInitializedAsync();
    }

    private async void GetAllStoriesAndInsertInDB()
    {
        bool isFinished = false;
        do
        {
            var stories = await _serviceStory.GetStoriesPage("HDS", _pageNumber);
            if (stories == null || stories.Count == 0)
            {
                isFinished = true;
                break;
            }
            InsertedStories += await this.InsertStories(stories);
            StateHasChanged();

            _pageNumber++;
        } while (!isFinished);
    }

    private async void GetStoriesFromBdd()
    {
        int startIndex = _pageNumberBdd * 50;
        int endIndex = (_pageNumberBdd * 50) + 50;
        _storiesFromBdd = await _serviceStorySQLiteHDSBackup.GetStories(startIndex, endIndex);
        StateHasChanged();
    }

    private void IncrementPageNumberBdd()
    {
        _pageNumberBdd += 50;
    }

    private async Task<long> InsertStories(List<XStory.DTO.Story> stories)
    {
        long insertedStories = 0;
        foreach (XStory.DTO.Story story in stories)
        {
            var res = await _serviceStorySQLiteHDSBackup.InsertStoryWithAuthorTransac(story);
            insertedStories = res ? insertedStories + 1 : 0;
        }
        return insertedStories;
    }

    private void OnStoryTapped(XStory.DTO.Story story)
    {
        this.SetCurrentStory(story);
    }

    private async void SetCurrentStory(XStory.DTO.Story story)
    {
        try
        {
            _currentStory = await _serviceStory.GetStory("HDS", story.Url);
            StateHasChanged(); // tester sans
        }
        catch (Exception ex)
        {
            // show error maybe NO INTERNET
        }

    }
}
